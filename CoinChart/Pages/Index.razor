@page "/"
@using CoinChart.Models
@inject CoinChart.Services.IAlphaVantageService AlphaVantageService
@using System.Globalization
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Spinner
@inject NavigationManager NavigationManager

<h2>CandleStick Stock Chart for @SelectedSymbol</h2>
<hr />

<h4>Only max 5 requests per minute</h4>

<div class="form-group row">
    @if (SymbolList != null)
    {
        <label for="department" class="col-sm-2 col-form-label">
            Symbol
        </label>
        <div class="col-sm-2">
            <select id="Symbol" @bind="SelectedSymbol" class="form-control">
                @foreach (var s in SymbolList)
                {
                    <option value="@s">@s</option>
                }
            </select>
        </div>
        <div class="col-sm-4">
            <button class="btn btn-secondary" @onclick="ShowStockChart">Show StockChart</button>
        </div>

    }
</div>
<div>
    @if (CoinHistory == null)
    {
        <div class="stockchartloader"></div>
    }
    else
    {
        <div class="@loadClass"></div>
        <div class="@loadDiv">
            <SfStockChart Title="@SelectedSymbol">
                <StockChartEvents Loaded="@ChartLoaded" Load="BeforeRender"></StockChartEvents>
                <StockChartPrimaryXAxis>
                    <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                    <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
                </StockChartPrimaryXAxis>
                <StockChartPrimaryYAxis>
                    <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                    <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
                </StockChartPrimaryYAxis>
                <StockChartTooltipSettings Enable="true"></StockChartTooltipSettings>
                <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
                <StockChartSeriesCollection>
                    <StockChartSeries DataSource="@CoinHistory" Type="ChartSeriesType.Candle"></StockChartSeries>
                </StockChartSeriesCollection>
                <StockChartChartArea>
                    <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
                </StockChartChartArea>
            </SfStockChart>
        </div>
        <style>
            .stockchartloader {
                border: 6px solid #f3f3f3;
                border-top: 6px solid #7a0fff;
                width: 40px;
                height: 40px;
                position: absolute;
                top: 46%;
                left: 46%;
                border-radius: 50%;
                -webkit-animation: loader 2s linear infinite;
                animation: loader 2s linear infinite;
            }

            .stockchartdiv {
                visibility: hidden;
            }
        </style>
    }
</div>


@code {
    List<string> SymbolList = new List<string>() { "BTC", "ETH", "XRP", "LINK", "BNB", "LTC" };
    string SelectedSymbol = "BTC";
    List<AlphaVantageHistoricalData> CoinHistory = null;
    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";
    string CurrentUri;


    void ChartLoaded(IStockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
    }

    protected override async Task OnInitializedAsync()
    {

        ShowStockChart();
    }

    void ShowStockChart()
    {
        CoinHistory = AlphaVantageService.GetCoinHistory(SelectedSymbol);
    }

    void BeforeRender(IStockChartEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }

}

